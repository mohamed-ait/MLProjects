# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LJaInHceVk2UvnT6-WRYuRRwjPdxrP1p

Importing the Dependencies :
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis

"""

# loading the diabetes dataset to a pandas DataFrme
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

# printing the first 5 rows of the dataset :
diabetes_dataset.head()

# number of rows and columns of the dataset :
diabetes_dataset.shape

# Getting the statistical measures of data :
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0------/ Non-Diabetic
 
1------/ Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

# Separating the data and the labels :
X = diabetes_dataset.drop(columns='Outcome', axis=1)
Y = diabetes_dataset['Outcome']

X.head()

Y.head()

"""Data Standardization :

---


"""

# stocke an instance of the function StandarScaler inside the variable scaler 
scaler = StandardScaler()

scaler.fit(X)

standarized_data = scaler.transform(X)

standarized_data

X = standarized_data
diabetes_dataset['Outcome']

"""Train Test Split :           

note : test_size : porcentage of test data (20%)
"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the model """

classifier = svm.SVC(kernel = 'linear')

# training support vector machine  classifier :
classifier.fit(X_train, Y_train)

"""Model Evaluation :

Accuracy Score
"""

# Accuracy on training data :
X_train_prediction = classifier.predict(X_train)

training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print(' the accuracy on training data is ', training_data_accuracy)

# Accuracy on test data :
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print(' the accuracy on test data is ', test_data_accuracy)

"""Making a predictive system : """

input_data = (6,148,72,35,0,33.6,0.627,50)

# changing the input_date to a numpy array : 
input_data_as_numpy_array = np.asarray(input_data)

# reshape the np array as we are predicting for one instance :
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
print(input_data_reshaped.shape)
# standardize the input data : 
std_data = scaler.transform(input_data_reshaped)
prediction = classifier.predict(std_data)

if (prediction[0] == 1) :
   print("the person is diabetic  ")
else : 
  print('the person is not diabetic ')